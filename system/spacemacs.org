#+title:      My Spacemacs Configuration
#+author:     Ben Sima <bensima@gmail.com>
#+desciption: A literate programming version of my configs for Spacemacs.
#+property:   tangle ~/.spacemacs
#+property:   comments org
#+property:   eval no-export

[[https://github.com/syl20bnr/spacemacs][Spacemacs]] is pretty awesome.

* Contents                                                            :toc@4:
 - [[#find-a-place-for-this-snippet][Find a place for this snippet]]
 - [[#dotspacemacs][=dotspacemacs=]]
   - [[#default-layers][Default layers]]
   - [[#initialization][Initialization]]
   - [[#user-initialization][User Initialization]]
   - [[#user-configuration][User Configuration]]
 - [[#additional-layers][Additional Layers]]
   - [[#journal][Journal]]
   - [[#private-layer][Private layer]]
     - [[#bsimame][=bsima.me=]]
     - [[#tasks][Tasks]]
     - [[#org-mode-files][Org-mode files]]
   - [[#shen-layer][Shen Layer]]

* TODO Find a place for this snippet

Via someone on irc #clojure

#+BEGIN_SRC elisp :tangle no
(define-abbrev-table 'erc-mode-abbrev-table
  '(("gface" "( ≖‿≖)")
    ("purrface" "( ･ ◡◡･)")
    ("derpface" "◔ ◡ ◔")
    ("mehface" "ヽ(´ｰ｀ )ﾉ")
    ("outtahere" "(╯°□°）╯︵ ┻━┻")
    ("dealwithit" "(⌐■_■)")
    ("novaivia" "⡗⢼⣏⣹⡀⢇⡸⡮⢵⡅ ⢇⡸⡅⡮⢵")
    ("whatever" "¯\_(ツ)_/¯")
    ("idonteven" "¯\(°_°)/¯")))
#+END_SRC

* =dotspacemacs=

This generates my =~/.spacemacs= file. I've begun using [[https://github.com/syl20bnr/spacemacs][Spacemacs]] instead of my
custom emacs config because of the great community and sensible builds, but I
still want some of my own customizations, so this file retains a lot of those.

** Default layers

The =dotspacemacs/layers= function declares what layers to bring in from the
core Spacemacs code. Layers are just preconfigured modules, usually wrapping one
or more emacs packages. All layers can be seen in the [[https://github.com/syl20bnr/spacemacs/tree/master/layers][=spacemacs/layers=]]
directory.

The settings here are:

- *dotspacemacs-distribution* - This is the base distribution to use, contained
  in the =+distribution= layer. Can either ber =spacemacs-base= or =spacemacs=.
- *dotspacemacs-configuration-layer-path* - A list of additional paths where I
  might keep my own layers. Paths must have a trailing slash. This is useful if
  I have personal layers that I don't want to submit back upstream, or haven't
  finished yet.
- *dotspacemacs-configuration-layers* - A list of layers that I want to load. I
  can load all the available layers by replacing the list with the symbol =all=.
- *dotspacemacs-additional-packages* - A list of additional packages I want
  without being wrapped in a layer. Configuration for these can be put in
  =dotspacemacs/config=.
- *dotspacemacs-excluded-packages* - A package blacklist
- *dotspacemacs-delete-orphan-packages* - If non-nil, Spacemacs will delete
  installed packages that aren't included in the layers or packages I included above.

#+BEGIN_SRC elisp
(defun dotspacemacs/layers ()
  (setq-default
    dotspacemacs-distribution 'spacemacs
    dotspacemacs-configuration-layer-path '()
    dotspacemacs-configuration-layers
    '( ;; dev tools
       shell
       git
       github
       dockerfile
       yaml
       nixos
       jabber
       xkcd
       emoji
       dash

       ;; notes, writing, display
       better-defaults
       themes-megapack
       auto-completion
       markdown
       org
       gnus
       bsima
       org-journal

       ;; languages
       octave
       clojure
       java
       common-lisp
       shen
       racket
       python
       elm
       haskell
       ocaml
       rust
       c-c++
      )
    dotspacemacs-additional-packages '( helm-lobsters
                                        sx
                                        circe
                                        instapaper
                                        dictionary
                                        org-journal
                                        org-trello  )
    dotspacemacs-excluded-packages '()
    dotspacemacs-delete-orphan-packages t))
#+END_SRC

** Initialization

The =dotspacemacs/init= function is called at the very startup of Spacemacs
initialization, /before layers are configured/. Don't put user code in here,
just modify the given variables.

#+BEGIN_SRC elisp
(defun dotspacemacs/init ()
  (setq-default
    dotspacemacs-editing-style   'hybrid
    dotspacemacs-verbose-loading nil
    dotspacemacs-startup-banner  nil
    dotspacemacs-startup-lists   '(recents projects bookmarks)
    dotspacemacs-themes '( minimal-light
                           minimal
                           leuven )
    dotspacemacs-colorize-cursor-according-to-state t
    dotspacemacs-default-font '("Fantasque Sans Mono"
                                :size 16
                                :weight normal
                                :width normal
                                :powerline-scale 1.1)
    dotspacemacs-leader-key "SPC"
    dotspacemacs-emacs-leader-key "M-m"
    dotspacemacs-major-mode-leader-key ","
    dotspacemacs-major-mode-emacs-leader-key "C-M-m"
    dotspacemacs-command-key ":"
    dotspacemacs-remap-Y-to-y$ t
    dotspacemacs-auto-save-file-location 'cache
    dotspacemacs-use-ido nil
    dotspacemacs-helm-resize nil
    dotspacemacs-helm-no-header nil
    dotspacemacs-helm-position 'bottom
    dotspacemacs-enable-paste-micro-state nil
    dotspacemacs-which-key-delay 0.4
    dotspacemacs-which-key-position 'bottom
    dotspacemacs-loading-progress-bar t
    dotspacemacs-fullscreen-at-startup nil
    dotspacemacs-fullscreen-use-non-native nil
    dotspacemacs-maximized-at-startup t
    dotspacemacs-active-transparency 90
    dotspacemacs-inactive-transparency 90
    dotspacemacs-mode-line-unicode-symbols t
    dotspacemacs-smartparens-strict-mode nil
    dotspacemacs-highlight-delimiters 'all
    dotspacemacs-persistent-server t
    dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
    dotspacemacs-default-package-repository nil
    ))
#+END_SRC

** User Initialization

I can put any user code here :)

#+BEGIN_SRC elisp
(defun dotspacemacs/user-init ()
  )
#+END_SRC

** User Configuration

Called at the very end of Spacemacs intitialization and layer configuration,
this function is good for my own customizations. Some highlights:

- Use =SPC t t= to toggle syntax highlighting
- org-journal and org-agenda configs
- jabber account setup, =SPC a j= will connect to jabber
- spacemacs' default =SPC f e d= to open the =~/.spacemacs= file is overwritten
  to open this org file

#+BEGIN_SRC elisp
(defun find-spacemacs-org-file ()
  (interactive)
  (find-file "~/me/system/spacemacs.org"))

(defun config-instapaper ()
  "https://bitbucket.org/jfm/emacs-instapaper/"
  (require 'instapaper)
  (define-key global-map "\C-ci" 'instapaper-add-at-point)
  ;(define-key w3m-mode-map "i" 'instapaper-add-from-w3m)
)

(defun my-circe-set-margin () (setq right-margin-width 5))
(defun my-lui-setup () (setq fringes-outside-margins t
                             right-margin-width 5
                             word-wrap t
                             wrap-prefix "    "))
(defun config-circe ()
  "Customizations to the Circe IRC client."
  (require 'circe)
  ;; simplify channel output
  (setq circe-format-say "{nick}> {body}")
  ;; hide messages I don't care about
  (circe-set-display-handler "JOIN" (lambda (&rest ignored) nil))
  (circe-set-display-handler "PART" (lambda (&rest ignored) nil))
  (circe-set-display-handler "QUIT" (lambda (&rest ignored) nil))
  (setq circe-reduce-lurker-spam t)
  ;; intelligent pasting
  (add-hook 'circe-channel-mode-hook 'enable-lui-autopaste)
  ;; spellcheck
  (setq lui-flyspell-p t
        lui-flyspell-alist '((".*" "american")))
  ;; allow for timestamps to be in the margin, so text can wrap correctly
  (setq lui-time-stamp-position 'right-margin
        lui-time-stamp-format   "%H:%M")
  (add-hook 'lui-mode-hook 'my-circe-set-margin)
  (add-hook 'lui-mode-hook 'my-lui-setup)
  (evil-leader/set-key "aic" 'circe))

(defun config-clojure ()
  (add-to-list 'auto-mode-alist '("\\.cljs\\.hl\\'" . clojurescript-mode))
  (define-clojure-indent
    (match 1)
    (aif 1)
    (awhen 1)
    (awhile 1)
    (aand 1)
    (acond 1)
    (afn 1)
    (rfn 1)
    (trav 1)
    (-> 1)
    (->> 1)
    (do 0)
    (into 1)))

(defun dotspacemacs/user-config ()
  (setq
    tooltip-use-echo-area t
    display-time-format "%k:%M"
    powerline-default-separator nil
    browse-url-browser-function 'eww-browse-url
    clojure-enable-fancify-symbols t
    clojure-align-forms-automatically t
    dash-helm-dash-docset-path "/home/ben/.local/share/Zeal/Zeal/docsets/"

    jabber-account-list      '(("bensima@gmail.com"
                               (:network-server . "talk.google.com")
                               (:connection-type . ssl)))
    jabber-chat-buffer-show-avatar nil
    jabber-history-enabled    t
    jabber-use-global-history nil
    jabber-backlog-number     40
    jabber-backlog-days       30

    org-todo-keywords       '((sequence "TODO" "IN PROGRESS" "BLOCKED" "|" "DONE" "DELEGATED"))
    org-default-tasks-file  "~/Dropbox/org/tasks.org"
    org-capture-templates   '(("t" "Task entry"
                               entry (file+function org-default-tasks-file bs/first-header)
                               "* TODO %?\n\n %i\n\n From: %a"
                               :empty-lines 1))
    org-journal-dir         "~/Dropbox/org/journal/"
    org-journal-date-format "#+TITLE: Journal Entry :: %Y-%b-%d (%A)"
    org-agenda-start-with-clockreport-mode t
    org-agenda-files        '("~/me/org/tasks.org"
                              "~/me/org/nebula.vc.org"
                              "~/me/org/plan.org"
                              "~/me/org/liaison.org"))
  (tooltip-mode -1)
  (display-time-mode t)
  (config-instapaper)
  (config-circe)
  (add-hook 'clojure-mode-hook #'config-clojure)
  (add-hook 'clojure-mode-hook #'paredit-mode)
  (define-key global-map "\C-cs" 'dictionary-search)
  (define-key global-map "\C-cm" 'dictionary-match-words)
  (evil-leader/set-key "fed" 'find-spacemacs-org-file)
  (evil-leader/set-key "tt"  'font-lock-mode)
  (evil-leader/set-key "aoI" 'org-clock-in))
#+END_SRC

* Additional Layers
** Journal

First bring in the [[https://github.com/bastibe/org-journal][org-journal]] package and setup Spacemacs keybindings. Journal
files are named with the date sans the =.org= extension, so we need to add these
files to org-mode.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/org-journal/packages.el
(setq org-journal-packages '(org-journal))

(defun org-journal/init-org-journal ()
  (use-package org-journal
    :config
    (progn
      (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))
      (global-set-key (kbd "C-c f j") 'journal-file-today)
      (global-set-key (kbd "C-c f y") 'journal-file-yesterday)
      (evil-leader/set-key
        "aojn" 'org-journal-new-entry
        "aojs" 'org-journal-search
        "aojd" 'org-journal-new-date-entry
        "aojr" 'org-journal-read-entry
        "aojj" 'org-journal-next-entry
        "aojk" 'org-journal-previous-entry
        "aojt" 'journal-file-today
        "aojy" 'journal-file-yesterday))))
#+END_SRC

Helper functions for getting journal files.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/org-journal/funcs.el
(defun get-journal-file-today ()
  "Return filename for today's journal entry"
  (let ((daily-name (format-time-string "%Y%m%d")))
    (expand-file-name (concat org-journal-dir daily-name))))

(defun journal-file-today ()
  "Create and load a journal file bbcikznuyqhosctvrased on today's date."
  (interactive)
  (find-file (get-journal-file-today)))

(defun get-journal-file-yesterday ()
  "Return filename for yesterday's journal entry."
  (let ((daily-name (format-time-string "%Y%m%d" (time-subtract (current-time) (days-to-time 1)))))
    (expand-file-name (concat org-journal-dir daily-name))))

(defun journal-file-yesterday ()
  "Creates and load a file based on yesterday's date."
  (interactive)
  (find-file (get-journal-file-yesterday)))

(defun bs/first-header ()
  (goto-char (point-min))
  (search-forward-regexp "^\* ")
  (beginning-of-line 1)
  (point))
#+END_SRC

** Private layer
*** =bsima.me=

I use orgmode for notes, mostly in the [[file:../notes][notes]] directory. The code blocks below
allow me to compile all of my notes into HTML, and then I can upload them to a
server somewhere. Lately I've just been publishing them to Amazon S3, and
routing [[http://www.bsima.me][bsima.me]] to the public-facing S3 bucket.

I must define the stylesheets and fonts that go into the =<head>= of every
page.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
(defvar bs-site-head
  "<link rel='stylesheet' type='text/css' href='/assets/css/tufte.css' />
   <link rel='stylesheet' type='text/css' href='/assets/css/main.css' />")
#+END_SRC

Get rid of the default CSS that orgmode inlines with every page, the validate
link, and the postamble footer stuff:

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
(setq org-html-head-include-default-style nil)
(setq org-html-validation-link nil)
(setq org-html-postamble nil)
#+END_SRC

Here I setup the org project association lists. I have 3 kinds of pages on my
site; I call them "notes," "pages," and "static" assets. All of the settings
here can be found in the [[http://orgmode.org/manual/Publishing.html][Publishing section]] of the orgmode manual.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
(setq org-publish-project-alist
      `(("org-notes"
         :base-directory "~/me/notes/"
         :publishing-directory "~/me/www/public/notes/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 5
         :html-head ,bs-site-head
         :auto-preamble t)

        ("org-pages"
         :base-directory "~/me/pages/"
         :publishing-directory "~/me/www/public/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 5
         :html-head ,bs-site-head
         :auto-preamble t)

        ;("org-essays"
        ; :base-directory "~/me/essays/"
        ; :base-extension "org"
        ; :publishing-directory "~/me/www/public/essays/"
        ; :recursive t
        ; :publishing-function org-html-publish-to-html
        ; :html-head ,bs-site-head
        ; :auto-preamble t)

        ("org-static"
         :base-directory "~/me/www/assets/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/me/www/public/assets/"
         :recursive t
         :htmlized-source nil
         :publishing-function org-publish-attachment)

        ("org" :components ("org-notes" "org-pages" "org-static"))))
#+END_SRC

To actually publish everything, I need to do =M-x org-publish-project RET org
RET=. That's too many things, so here is a helper function. The =t= makes
orgmode publish everything, even if the file's been unchanged.

Call this with ~SPC A B P~.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
  (defun bs/publish ()
    (interactive)
    (org-publish-project "org" t))

(evil-leader/set-key "abp" 'bs/publish)
#+END_SRC

*** Tasks

I keep my tasks in =~/Dropbox/org/tasks.org=. The value of =bs/tasks-file= is
where my tasks live, and the function =bs/get-tasks-file= will open my tasks in
a new buffer.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
(setq bs/tasks-file "~/Dropbox/org/tasks.org")

(defun bs/get-tasks-file ()
  (interactive)
  (find-file bs/tasks-file))
#+END_SRC

To view my tasks, just do =SPC a b t=.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el
(evil-leader/set-key "abt" 'bs/get-tasks-file)
#+END_SRC

*** Org-mode files

To open any of my orgmode files, I can pop up a helm-mode buffer and find the
one I want with either =C-c b= or =SPC a b o=.

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/bsima/config.el

(defvar *bs/org-dir* "~/me/org")

(defun bs/org-files ()
  "Returns a list of all my orgmode files."
  (interactive)
  (let ((fs (cl-remove-if-not
              (lambda (s) (s-suffix? ".org" s))
              (directory-files *bs/org-dir*))))
    (helm :sources (helm-build-sync-source "org"
                     :candidates fs
                     :fuzzy-match t
                     :action (lambda (f) (find-file (concat *bs/org-dir* "/" f))))
          :buffer "*bs-org-files*")))

(define-key global-map "\C-cb" 'bs/org-files)
(evil-leader/set-key   "abo"   'bs/org-files)
#+END_SRC
** Shen Layer

#+BEGIN_SRC elisp :tangle ~/.emacs.d/private/shen/packages.el
(setq shen-packages
      '(shen-mode
        ;; inf-shen is not in GNU ELPA, pending FSF copyright paperwork
        (inf-shen :location (recipe :fetcher git
                                    :repo "https://github.com/eschulte/shen-mode.git"
                                    :files ("inf-shen.el")))))

(defun shen/init-shen-mode ()
  (use-package shen-mode
    :defer t
    :mode "\\.shen\\'"
    :config
    (progn
      (evil-leader/set-key-for-mode 'shen-mode
        ;; e - eval
        "el" 'shen-eval-last-sexp
        "ed" 'shen-eval-defun
        "eg" 'shen-eval-defun-and-go
        "er" 'shen-eval-region
        "et" 'shen-eval-region-and-go

        ;; compile
        "f" 'shen-compile-file
        "d" 'shen-compile-defun
        "g" 'shen-compile-defun-and-go

        ;; s - REPL
        "si" 'inferior-shen
        "ss" 'switch-to-shen
        "sl" 'shen-load-file

        ;; h - help
        "ha" 'shen-show-arglist
        "hs" 'shen-describe-sym
        "hf" 'shen-show-function-documentation
        "hv" 'shen-show-variable-documentation))))

(defun shen/init-inf-shen ()
  (use-package inf-shen
    :defer t))
#+END_SRC
